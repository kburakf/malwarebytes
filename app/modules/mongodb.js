const mongoose = require('mongoose');

const { mongo } = require('../config/index');

const mongoDB = {
  connectAttempts: mongo.connectAttempts,
  maxConnectAttempts: mongo.maxConnectAttempts,
  retryInterval: mongo.retryInterval,

  connect: async function () {
    try {
      await mongoose.connect(mongo.uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });

      console.log('Connected to MongoDB');

      this.connectAttempts = 0;

      mongoose.connection.on('error', (err) => {
        console.error('MongoDB connection error:', err);

        mongoose.disconnect();
      });

      mongoose.connection.on('disconnected', () => {
        console.error('MongoDB connection lost. Trying to reconnect...');

        this.reconnect(mongo.uri);
      });
    } catch (error) {
      this.handleConnectionError(error, mongo.uri);
    }
  },

  handleConnectionError: async function (error, uri) {
    console.error('Failed to connect to MongoDB:', error);

    this.connectAttempts++;

    if (this.connectAttempts < this.maxConnectAttempts) {
      console.log(
        `Retrying MongoDB connection in ${this.retryInterval / 1000} seconds...`
      );

      setTimeout(() => this.connect(uri), this.retryInterval);
    } else {
      console.log('Maximum MongoDB connection attempts reached. Giving up.');
    }
  },

  reconnect: async function (uri) {
    if (this.connectAttempts < this.maxConnectAttempts) {
      console.log(
        `Attempting to reconnect MongoDB. Attempt ${this.connectAttempts + 1}/${
          this.maxConnectAttempts
        }`
      );

      setTimeout(() => this.connect(uri), this.retryInterval);
    } else {
      console.log('Maximum MongoDB reconnection attempts reached. Giving up.');
    }
  },
};

module.exports = mongoDB;
