const httpMocks = require('node-mocks-http');
const scanFileWithAntivirus = require('../../middlewares/scanFileWithAntivirus');

jest.mock('clamscan', () => {
  return {
    NodeClam: jest.fn().mockImplementation(() => {
      return {
        init: jest.fn().mockResolvedValue({
          scanStream: jest.fn().mockResolvedValue({ isInfected: false }),
        }),
      };
    }),
  };
});

jest.mock('../../config', () => ({
  clamav: {
    host: 'localhost',
    port: '3310',
  },
}));

describe('scanFileWithAntivirus Middleware', () => {
  let req, res, next;

  beforeEach(() => {
    jest.clearAllMocks();
    req = httpMocks.createRequest();
    res = httpMocks.createResponse();
    next = jest.fn();
  });

  test('should respond with 400 if no file is uploaded', async () => {
    await scanFileWithAntivirus(req, res, next);

    expect(res.statusCode).toBe(400);

    expect(res._getData()).toBe('No file uploaded.');
  });

  test('should respond with 500 if an error occurs during scanning', async () => {
    require('clamscan').NodeClam.mockImplementation(() => ({
      init: jest.fn().mockResolvedValue({
        scanStream: jest.fn().mockRejectedValue(new Error('Scanning error')),
      }),
    }));

    req.file = { buffer: Buffer.from('file to cause error') };
    await scanFileWithAntivirus(req, res, next);

    expect(res.statusCode).toBe(500);
    expect(res._getData()).toBe('Internal Server Error');
  });
});
