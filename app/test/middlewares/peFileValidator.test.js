const httpMocks = require('node-mocks-http');
const peFileValidator = require('../../middlewares/peFileValidator');

jest.mock('file-type', () => ({
  fileTypeFromBuffer: jest
    .fn()
    .mockResolvedValue({ ext: 'exe', mime: 'application/x-msdownload' }),
}));

const { fileTypeFromBuffer } = require('file-type');
describe('PE File Validator', () => {
  let req, res, next;

  beforeEach(() => {
    req = httpMocks.createRequest();
    res = httpMocks.createResponse();
    next = jest.fn();
  });

  test('should respond with 400 if no file is uploaded', async () => {
    await peFileValidator(req, res, next);

    expect(res.statusCode).toBe(400);

    expect(res._getData()).toBe('No file uploaded.');
  });

  test('should respond with 500 if an error occurs', async () => {
    req.file = { buffer: Buffer.from('causes error') };

    fileTypeFromBuffer.mockRejectedValue(new Error('Unexpected error'));

    await peFileValidator(req, res, next);

    expect(res.statusCode).toBe(500);

    expect(res._getData()).toBe('Internal Server Error');
  });
});
