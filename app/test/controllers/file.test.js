const { uploadFile } = require('../../controllers/file');
const LogDAO = require('../../dao/log');
const FileDAO = require('../../dao/file');
const S3Service = require('../../modules/s3');

jest.mock('../../dao/log');
jest.mock('../../dao/file');

jest.mock('../../modules/s3', () => {
  return jest.fn().mockImplementation(() => ({
    uploadFile: jest.fn().mockResolvedValue({
      Key: '2024/03/24/test.exe',
      Location: 'test-location',
    }),
    deleteFile: jest.fn().mockResolvedValue({ Deleted: true }),
  }));
});

describe('uploadFile Controller', () => {
  let req;
  let res;
  let hash;

  beforeEach(() => {
    req = {
      file: {
        buffer: Buffer.from('PE_HEADER'),
        originalname: 'test.exe',
        size: 9,
        mimetype: 'application/vnd.microsoft.portable-executable',
      },
    };
    res = {
      status: jest.fn().mockReturnThis(),
      send: jest.fn(),
    };

    hash = '02c1ceaa0cd88eaec0861add5d8ffdef38a82e5c9a58ba99782302e350ee4bde';

    S3Service.mockClear();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should return 400 if no file is uploaded', async () => {
    req.file = undefined;

    await uploadFile(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalled();
  });

  it('should return 409 if file with same hash already exists', async () => {
    FileDAO.findHashById.mockResolvedValue(true);

    await uploadFile(req, res);

    expect(FileDAO.findHashById).toHaveBeenCalledWith(hash);
    expect(LogDAO.saveLog).toHaveBeenCalledWith({
      fileHash: hash,
      message: 'File previously received. Event logged',
    });
    expect(res.status).toHaveBeenCalledWith(409);
    expect(res.send).toHaveBeenCalled();
  });

  it('should return 500 if an error occurs', async () => {
    FileDAO.findHashById.mockRejectedValue(new Error('Test error'));

    await uploadFile(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.send).toHaveBeenCalled();
  });
});
