const AWS = require('aws-sdk');
const S3Service = require('../../modules/s3');

const mockUploadObject = jest.fn().mockReturnThis();
const mockDeleteObject = jest.fn().mockReturnThis();
const mockPromise = jest.fn();
const mockBucketName = 'mock-bucket';

AWS.S3 = jest.fn(() => ({
  upload: mockUploadObject,
  deleteObject: mockDeleteObject,
  promise: mockPromise,
}));

afterEach(() => {
  jest.restoreAllMocks();
});

describe('S3Service', () => {
  let s3Service;

  beforeEach(() => {
    s3Service = new S3Service();
    s3Service.bucket = mockBucketName;
  });

  it('should upload file correctly', async () => {
    const buffer = Buffer.from('hello world');
    const name = 'test.txt';
    const contentType = 'text/plain';

    const mockDate = new Date('2024-03-24T00:00:00.000Z');

    jest.spyOn(global, 'Date').mockImplementation(() => mockDate);

    mockPromise.mockResolvedValueOnce({
      Location: 'http://example.com/2024/03/24/test.txt',
    });

    const result = await s3Service.uploadFile({ name, contentType, buffer });

    expect(AWS.S3).toHaveBeenCalled();

    expect(mockUploadObject).toHaveBeenCalledWith({
      Bucket: expect.any(String),
      Key: `2024/03/24/${name}`,
      Body: expect.any(Buffer),
      ContentType: 'text/plain',
    });

    expect(result).toEqual({
      Location: 'http://example.com/2024/03/24/test.txt',
    });
  });

  it('should delete a file correctly', async () => {
    const key = 'some/path';

    await s3Service.deleteFile(key);

    expect(AWS.S3).toHaveBeenCalled();
    expect(mockDeleteObject).toHaveBeenCalledWith({
      Bucket: mockBucketName,
      Key: key,
    });
  });
});
